"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSeeders = exports.runSeeder = void 0;
const locter_1 = require("locter");
const utils_1 = require("./utils");
const data_source_1 = require("../data-source");
const factory_1 = require("./factory");
function prepareSeeder(options) {
    return __awaiter(this, void 0, void 0, function* () {
        options = options !== null && options !== void 0 ? options : {};
        options = (0, utils_1.setDefaultSeederOptions)(options);
        options = (0, data_source_1.modifyDataSourceOptionForRuntimeEnvironment)(options, 'seeds');
        options = (0, data_source_1.modifyDataSourceOptionForRuntimeEnvironment)(options, 'factories');
        if (options.factories) {
            let factoryFiles = [];
            const factoryConfigs = [];
            for (let i = 0; i < options.factories.length; i++) {
                const value = options.factories[i];
                if (typeof value === 'string') {
                    factoryFiles.push(value);
                }
                else {
                    factoryConfigs.push(value);
                }
            }
            if (factoryFiles.length > 0) {
                factoryFiles = yield (0, utils_1.resolveFilePatterns)(factoryFiles);
                factoryFiles = (0, utils_1.resolveFilePaths)(factoryFiles);
                for (let i = 0; i < factoryFiles.length; i++) {
                    (0, locter_1.loadScriptFileSync)(factoryFiles[i]);
                }
            }
            if (factoryConfigs.length > 0) {
                const factoryManager = (0, factory_1.useSeederFactoryManager)();
                for (let i = 0; i < factoryConfigs.length; i++) {
                    factoryManager.set(factoryConfigs[i].entity, factoryConfigs[i].factoryFn);
                }
            }
        }
        const items = [];
        if (options.seeds) {
            let seedFiles = [];
            const seedConstructors = [];
            for (let i = 0; i < options.seeds.length; i++) {
                const value = options.seeds[i];
                if (typeof value === 'string') {
                    seedFiles.push(value);
                }
                else {
                    seedConstructors.push(value);
                }
            }
            if (seedFiles.length > 0) {
                seedFiles = yield (0, utils_1.resolveFilePatterns)(seedFiles);
                seedFiles = (0, utils_1.resolveFilePaths)(seedFiles);
                for (let i = 0; i < seedFiles.length; i++) {
                    const fileExport = (0, locter_1.loadScriptFileExportSync)(seedFiles[i]);
                    if (fileExport) {
                        const item = fileExport.value;
                        if (!options.seedName || options.seedName === item.name) {
                            items.push(item);
                        }
                    }
                }
            }
            if (seedConstructors.length > 0) {
                for (let i = 0; i < seedConstructors.length; i++) {
                    if (!options.seedName || options.seedName === seedConstructors[i].name) {
                        items.push(seedConstructors[i]);
                    }
                }
            }
        }
        return items;
    });
}
function runSeeder(dataSource, seeder, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        options = options || {};
        options.seeds = [seeder];
        options.factoriesLoad = (_a = options.factoriesLoad) !== null && _a !== void 0 ? _a : true;
        if (options.factoriesLoad &&
            !options.factories) {
            const { factories: dataSourceFactories } = dataSource.options;
            if (typeof dataSourceFactories !== 'undefined') {
                options.factories = dataSourceFactories;
            }
        }
        yield prepareSeeder(options);
        (0, data_source_1.setDataSource)(dataSource);
        // eslint-disable-next-line new-cap
        const clazz = new seeder();
        const factoryManager = (0, factory_1.useSeederFactoryManager)();
        return clazz.run(dataSource, factoryManager);
    });
}
exports.runSeeder = runSeeder;
function runSeeders(dataSource, options) {
    return __awaiter(this, void 0, void 0, function* () {
        options = options || {};
        const { seeds, factories } = dataSource.options;
        if (typeof options.seeds === 'undefined' &&
            typeof seeds !== 'undefined') {
            options.seeds = seeds;
        }
        if (typeof options.factories === 'undefined' &&
            typeof factories !== 'undefined') {
            options.factories = factories;
        }
        const items = yield prepareSeeder(options);
        const promises = [];
        const results = [];
        for (let i = 0; i < items.length; i++) {
            const promise = runSeeder(dataSource, items[i], {
                factoriesLoad: false,
            });
            if (options.parallelExecution) {
                promises.push(promise);
            }
            else {
                yield promise;
            }
        }
        if (promises.length > 0) {
            return Promise.all(promises);
        }
        return results;
    });
}
exports.runSeeders = runSeeders;
//# sourceMappingURL=module.js.map
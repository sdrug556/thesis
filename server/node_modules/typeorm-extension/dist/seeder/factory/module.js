"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeederFactory = void 0;
const faker_1 = require("@faker-js/faker");
const utils_1 = require("../../utils");
const data_source_1 = require("../../data-source");
const utils_2 = require("../utils");
class SeederFactory {
    // --------------------------------------------------------------
    constructor(context) {
        this.context = context;
    }
    // --------------------------------------------------------------
    setMeta(value) {
        this.meta = value;
        return this;
    }
    // --------------------------------------------------------------
    make(params, save) {
        return __awaiter(this, void 0, void 0, function* () {
            const factoryFn = this.context.factoryFn(faker_1.faker, this.meta);
            let entity;
            if ((0, utils_2.isPromise)(factoryFn)) {
                entity = yield this.resolve(yield factoryFn, save);
            }
            else {
                entity = yield this.resolve(factoryFn, save);
            }
            if (params) {
                const keys = Object.keys(params);
                for (let i = 0; i < keys.length; i++) {
                    entity[keys[i]] = params[keys[i]];
                }
            }
            return entity;
        });
    }
    // --------------------------------------------------------------
    save(params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataSource = yield (0, data_source_1.useDataSource)();
            const entity = yield this.make(params, true);
            const entityManager = dataSource.getRepository(this.context.entity);
            return entityManager.save(entity, options);
        });
    }
    saveMany(amount, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const items = [];
            for (let i = 0; i < amount; i++) {
                const item = yield this.save(params, options);
                items.push(item);
            }
            return items;
        });
    }
    // --------------------------------------------------------------
    resolve(entity, save) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = Object.keys(entity);
            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                const value = entity[key];
                if (!(0, utils_1.hasOwnProperty)(entity, key)) {
                    // eslint-disable-next-line no-continue
                    continue;
                }
                if (typeof value === 'object' &&
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    value instanceof SeederFactory) {
                    if (save) {
                        entity[key] = yield value.save();
                    }
                    else {
                        entity[key] = yield value.make();
                    }
                }
                if (value &&
                    (0, utils_1.hasOwnProperty)(value, 'then') &&
                    typeof value.then === 'function') {
                    entity[key] = yield value;
                }
            }
            return entity;
        });
    }
}
exports.SeederFactory = SeederFactory;
//# sourceMappingURL=module.js.map
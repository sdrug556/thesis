"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFilePaths = exports.resolveFilePatterns = void 0;
/* istanbul ignore next */
const path_1 = __importDefault(require("path"));
const locter_1 = require("locter");
function resolveFilePatterns(filesPattern, root) {
    return __awaiter(this, void 0, void 0, function* () {
        return (0, locter_1.locateFiles)(filesPattern, Object.assign(Object.assign({}, (root ? { path: root } : {})), { ignore: ['**/*.d.ts'] })).then((files) => files.map((el) => path_1.default.join(el.path, el.name + el.extension)));
    });
}
exports.resolveFilePatterns = resolveFilePatterns;
function resolveFilePaths(filePaths, root) {
    root = root || process.cwd();
    return filePaths.map((filePath) => (path_1.default.isAbsolute(filePath) ?
        filePath :
        path_1.default.resolve(root, filePath)));
}
exports.resolveFilePaths = resolveFilePaths;
//# sourceMappingURL=file-path.js.map
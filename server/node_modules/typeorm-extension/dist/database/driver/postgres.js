"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropPostgresDatabase = exports.createPostgresDatabase = exports.executeSimplePostgresQuery = exports.createSimplePostgresConnection = void 0;
const utils_1 = require("../../utils");
const utils_2 = require("./utils");
const utils_3 = require("../utils");
function createSimplePostgresConnection(driver, options, operationContext) {
    return __awaiter(this, void 0, void 0, function* () {
        /**
         * pg library
         */
        const { Client } = driver.postgres;
        const data = Object.assign({ host: options.host, port: options.port, user: options.user, password: options.password, ssl: options.ssl }, (options.extra ? options.extra : {}));
        if (typeof operationContext.initialDatabase === 'string') {
            data.database = operationContext.initialDatabase;
        }
        const client = new Client(data);
        yield client.connect();
        return client;
    });
}
exports.createSimplePostgresConnection = createSimplePostgresConnection;
function executeSimplePostgresQuery(connection, query, endConnection = true) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(((resolve, reject) => {
            connection.query(query, (queryErr, queryResult) => {
                if (endConnection) {
                    connection.end();
                }
                if (queryErr) {
                    reject(queryErr);
                }
                resolve(queryResult);
            });
        }));
    });
}
exports.executeSimplePostgresQuery = executeSimplePostgresQuery;
function createPostgresDatabase(context) {
    return __awaiter(this, void 0, void 0, function* () {
        context = yield (0, utils_3.buildDatabaseCreateContext)(context);
        const options = (0, utils_2.buildDriverOptions)(context.options);
        const driver = (0, utils_2.createDriver)(context.options);
        const connection = yield createSimplePostgresConnection(driver, options, context);
        if (context.ifNotExist) {
            const existQuery = `SELECT * FROM pg_database WHERE lower(datname) = lower('${options.database}');`;
            const existResult = yield executeSimplePostgresQuery(connection, existQuery, false);
            if (typeof existResult === 'object' &&
                (0, utils_1.hasOwnProperty)(existResult, 'rows') &&
                Array.isArray(existResult.rows) &&
                existResult.rows.length > 0) {
                yield connection.end();
                return Promise.resolve();
            }
        }
        /**
         * @link https://github.com/typeorm/typeorm/blob/master/src/driver/postgres/PostgresQueryRunner.ts#L326
         */
        let query = `CREATE DATABASE "${options.database}"`;
        if (typeof options.characterSet === 'string') {
            query += ` WITH ENCODING '${options.characterSet}'`;
        }
        const result = yield executeSimplePostgresQuery(connection, query);
        if (context.synchronize) {
            yield (0, utils_3.setupDatabaseSchema)(context.options);
        }
        return result;
    });
}
exports.createPostgresDatabase = createPostgresDatabase;
function dropPostgresDatabase(context) {
    return __awaiter(this, void 0, void 0, function* () {
        context = yield (0, utils_3.buildDatabaseDropContext)(context);
        const options = (0, utils_2.buildDriverOptions)(context.options);
        const driver = (0, utils_2.createDriver)(context.options);
        const connection = yield createSimplePostgresConnection(driver, options, context);
        /**
         * @link https://github.com/typeorm/typeorm/blob/master/src/driver/postgres/PostgresQueryRunner.ts#L343
         */
        const query = context.ifExist ?
            `DROP DATABASE IF EXISTS "${options.database}"` :
            `DROP DATABASE "${options.database}"`;
        return executeSimplePostgresQuery(connection, query);
    });
}
exports.dropPostgresDatabase = dropPostgresDatabase;
//# sourceMappingURL=postgres.js.map
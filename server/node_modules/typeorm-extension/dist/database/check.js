"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkDatabase = void 0;
const typeorm_1 = require("typeorm");
const data_source_1 = require("../data-source");
const utils_1 = require("../utils");
/**
 * Check database setup progress.
 *
 * @param context
 */
function checkDatabase(context) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        context = context || {};
        context.dataSourceCleanup = (_a = context.dataSourceCleanup) !== null && _a !== void 0 ? _a : true;
        const result = {
            exists: true,
            schema: false,
            migrationsPending: [],
        };
        let { dataSource } = context;
        if (typeof dataSource === 'undefined' &&
            (0, data_source_1.hasDataSource)(context.alias)) {
            // todo: data-source might get initialized here
            dataSource = yield (0, data_source_1.useDataSource)(context.alias);
        }
        const dataSourceExisted = !!dataSource;
        if (typeof dataSource === 'undefined') {
            if (context.options) {
                dataSource = new typeorm_1.DataSource(Object.assign(Object.assign({}, context.options), { synchronize: false }));
            }
            else {
                const options = yield (0, data_source_1.useDataSourceOptions)(context.alias);
                dataSource = new typeorm_1.DataSource(Object.assign(Object.assign({}, options), { synchronize: false }));
            }
        }
        try {
            if (!dataSource.isInitialized) {
                yield dataSource.initialize();
            }
        }
        catch (e) {
            result.exists = false;
            return result;
        }
        const queryRunner = dataSource.createQueryRunner();
        if (dataSource.migrations &&
            dataSource.migrations.length > 0) {
            const migrationExecutor = new typeorm_1.MigrationExecutor(dataSource, queryRunner);
            result.migrationsPending = yield migrationExecutor.getPendingMigrations();
            if (result.migrationsPending.length === 0) {
                result.schema = true;
            }
        }
        else {
            let schema;
            if ((0, utils_1.hasStringProperty)(dataSource.driver.options, 'schema')) {
                schema = dataSource.driver.options.schema;
            }
            const migrationsTableName = dataSource.driver.buildTableName(dataSource.options.migrationsTableName || 'migrations', schema, dataSource.driver.database);
            const migrationsTableExists = yield queryRunner.hasTable(migrationsTableName);
            if (migrationsTableExists) {
                result.schema = dataSource.entityMetadatas.length === 0;
            }
            else {
                const tableNames = dataSource.entityMetadatas.map((entityMetadata) => entityMetadata.tablePath);
                const tables = yield queryRunner.getTables(tableNames);
                result.schema = tables.length === dataSource.entityMetadatas.length;
            }
        }
        yield queryRunner.release();
        if (!dataSourceExisted) {
            if (context.dataSourceCleanup) {
                yield dataSource.destroy();
                if (!context.dataSource) {
                    (0, data_source_1.unsetDataSource)(context.alias);
                }
            }
            else {
                (0, data_source_1.setDataSource)(dataSource, context.alias);
            }
        }
        return result;
    });
}
exports.checkDatabase = checkDatabase;
//# sourceMappingURL=check.js.map
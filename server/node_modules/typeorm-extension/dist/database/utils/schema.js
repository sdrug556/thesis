"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupDatabaseSchema = void 0;
const typeorm_1 = require("typeorm");
function setupDatabaseSchema(input) {
    return __awaiter(this, void 0, void 0, function* () {
        let dataSource;
        let options;
        if (typeorm_1.InstanceChecker.isDataSource(input)) {
            dataSource = input;
            options = dataSource.options;
        }
        else {
            options = input;
            dataSource = new typeorm_1.DataSource(options);
        }
        if (!dataSource.isInitialized) {
            yield dataSource.initialize();
        }
        let migrationsCount = 0;
        if (input.migrations) {
            migrationsCount = Array.isArray(input.migrations) ?
                input.migrations.length :
                Object.keys(input.migrations).length;
        }
        if (migrationsCount > 0) {
            yield dataSource.runMigrations({ transaction: options.migrationsTransactionMode });
        }
        else {
            yield dataSource.synchronize(false);
        }
        if (!typeorm_1.InstanceChecker.isDataSource(input)) {
            yield dataSource.destroy();
        }
    });
}
exports.setupDatabaseSchema = setupDatabaseSchema;
//# sourceMappingURL=schema.js.map
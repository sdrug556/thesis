"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDataSource = void 0;
const locter_1 = require("locter");
const path_1 = __importDefault(require("path"));
const typeorm_1 = require("typeorm");
const utils_1 = require("../../utils");
const tsconfig_1 = require("../../utils/tsconfig");
const options_1 = require("../options");
function findDataSource(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileNames = [
            'data-source',
        ];
        context = context || {};
        if (context.fileName) {
            context.fileName = (0, locter_1.removeFileNameExtension)(context.fileName, ['.js', '.ts', '.mjs', '.cjs']);
            if (context.fileName !== 'data-source') {
                fileNames.unshift(context.fileName);
            }
        }
        const basePaths = [
            process.cwd(),
        ];
        if (context.directory &&
            context.directory !== process.cwd()) {
            context.directory = path_1.default.isAbsolute(context.directory) ?
                context.directory :
                path_1.default.join(process.cwd(), context.directory);
            basePaths.unshift(context.directory);
        }
        const directories = [
            path_1.default.join('src', 'db'),
            path_1.default.join('src', 'database'),
            path_1.default.join('src'),
        ];
        let paths = [];
        for (let i = 0; i < basePaths.length; i++) {
            paths.push(basePaths[i]);
            for (let j = 0; j < directories.length; j++) {
                paths.push(path_1.default.join(basePaths[i], directories[j]));
            }
        }
        if (!(0, utils_1.isTsNodeRuntimeEnvironment)()) {
            let tsConfigFound = false;
            for (let i = 0; i < basePaths.length; i++) {
                const { compilerOptions } = yield (0, tsconfig_1.readTsConfig)(basePaths[i]);
                if (compilerOptions) {
                    paths = paths.map((item) => (0, options_1.changeTSToJSPath)(item, { dist: compilerOptions.outDir }));
                    tsConfigFound = true;
                    break;
                }
            }
            if (!tsConfigFound) {
                paths = paths.map((item) => (0, options_1.changeTSToJSPath)(item));
            }
        }
        for (let i = 0; i < fileNames.length; i++) {
            const info = yield (0, locter_1.locateFile)(`${fileNames[i]}.{cjs,js,mjs,ts}`, {
                path: paths,
                ignore: ['**/*.d.ts'],
            });
            if (info) {
                const fileExports = (0, locter_1.loadScriptFileSync)(info);
                if (typeorm_1.InstanceChecker.isDataSource(fileExports)) {
                    return fileExports;
                }
                if (typeof fileExports === 'object') {
                    const keys = Object.keys(fileExports);
                    for (let j = 0; j < keys.length; j++) {
                        const value = fileExports[keys[j]];
                        if (typeorm_1.InstanceChecker.isDataSource(value)) {
                            return value;
                        }
                    }
                }
            }
        }
        return undefined;
    });
}
exports.findDataSource = findDataSource;
//# sourceMappingURL=module.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDataSource = exports.unsetDataSource = exports.hasDataSource = exports.setDataSource = void 0;
const typeorm_1 = require("typeorm");
const options_1 = require("./options");
const instances = {};
const initializePromises = {};
const optionsPromises = {};
function setDataSource(dataSource, alias) {
    alias = alias || 'default';
    instances[alias] = dataSource;
}
exports.setDataSource = setDataSource;
function hasDataSource(alias) {
    alias = alias || 'default';
    return Object.prototype.hasOwnProperty.call(instances, alias);
}
exports.hasDataSource = hasDataSource;
function unsetDataSource(alias) {
    alias = alias || 'default';
    if (Object.prototype.hasOwnProperty.call(instances, alias)) {
        delete instances[alias];
    }
    /* istanbul ignore next */
    if (Object.prototype.hasOwnProperty.call(optionsPromises, alias)) {
        delete optionsPromises[alias];
    }
    /* istanbul ignore next */
    if (Object.prototype.hasOwnProperty.call(initializePromises, alias)) {
        delete initializePromises[alias];
    }
}
exports.unsetDataSource = unsetDataSource;
function useDataSource(alias) {
    return __awaiter(this, void 0, void 0, function* () {
        alias = alias || 'default';
        if (Object.prototype.hasOwnProperty.call(instances, alias)) {
            if (!instances[alias].isInitialized) {
                /* istanbul ignore next */
                if (!Object.prototype.hasOwnProperty.call(initializePromises, alias)) {
                    initializePromises[alias] = instances[alias].initialize()
                        .catch((e) => {
                        delete initializePromises[alias];
                        throw e;
                    });
                }
                yield initializePromises[alias];
            }
            return instances[alias];
        }
        /* istanbul ignore next */
        if (!Object.prototype.hasOwnProperty.call(optionsPromises, alias)) {
            optionsPromises[alias] = (0, options_1.useDataSourceOptions)(alias)
                .catch((e) => {
                delete optionsPromises[alias];
                throw e;
            });
        }
        const options = yield optionsPromises[alias];
        const dataSource = new typeorm_1.DataSource(options);
        /* istanbul ignore next */
        if (!Object.prototype.hasOwnProperty.call(initializePromises, alias)) {
            initializePromises[alias] = dataSource.initialize()
                .catch((e) => {
                delete initializePromises[alias];
                throw e;
            });
        }
        yield initializePromises[alias];
        instances[alias] = dataSource;
        return dataSource;
    });
}
exports.useDataSource = useDataSource;
//# sourceMappingURL=singleton.js.map
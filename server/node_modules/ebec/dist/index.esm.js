import { merge } from 'smob';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

/*
 * Copyright (c) 2022.
 * Author Peter Placzek (tada5hi)
 * For the full copyright and license information,
 * view the LICENSE file that was distributed with this source code.
 */

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/**
 * Deep merge two objects.
 * @param target
 * @param sources
 */
function mergeOptions(target) {
  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }
  return merge.apply(void 0, [target].concat(sources));
}
function buildOptions(data, options) {
  if (typeof data === 'undefined') {
    data = {};
  }
  if (typeof options === 'undefined') {
    options = {};
  }
  if (!(data instanceof Error) && typeof data !== 'string') {
    options = mergeOptions({}, data, _objectSpread2({}, options));
  }
  if (!options.previous && data instanceof Error) {
    options.previous = data;
  }
  return options;
}

/*
 * Copyright (c) 2022-2022.
 * Author Peter Placzek (tada5hi)
 * For the full copyright and license information,
 * view the LICENSE file that was distributed with this source code.
 */

function buildMessage(data, options) {
  if (typeof data === 'undefined') {
    data = {};
  }
  if (typeof options === 'undefined') {
    options = {};
  }
  var message;
  if (typeof data === 'string') {
    message = data;
  }
  if (!message && options.message) {
    message = options.message;
  }
  if (!message && !options.decorateMessage) {
    if (data instanceof Error) {
      /* istanbul ignore next */
      message = data.message;
    } else if (options.previous instanceof Error) {
      message = options.previous.message;
    }
  }
  return message;
}

var BaseError = /*#__PURE__*/function (_Error) {
  _inherits(BaseError, _Error);
  var _super = _createSuper(BaseError);
  //--------------------------------------------------------------------

  function BaseError(data, options) {
    var _this;
    _classCallCheck(this, BaseError);
    options = buildOptions(data, options);
    var message = buildMessage(data, options);
    _this = _super.call(this, message);
    if (_this.name === undefined || _this.name === 'Error') {
      Object.defineProperty(_assertThisInitialized(_this), 'name', {
        configurable: true,
        enumerable: false,
        value: _this.constructor.name,
        writable: true
      });
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    }

    /* istanbul ignore next */
    if (typeof _this.stack === 'undefined' || _this.stack === '') {
      _this.stack = new Error(message).stack;
    }
    _this.options = {};
    _this.setOptions(options);
    return _this;
  }

  //--------------------------------------------------------------------
  _createClass(BaseError, [{
    key: "getOptions",
    value: function getOptions() {
      return this.options;
    }
  }, {
    key: "getOption",
    value: function getOption(key) {
      return this.options[key];
    }

    //--------------------------------------------------------------------
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      if (typeof options === 'undefined') {
        options = {};
      }
      var keys = Object.keys(options);
      for (var i = 0; i < keys.length; i++) {
        this.setOption(keys[i], options[keys[i]]);
      }
    }
  }, {
    key: "setOption",
    value: function setOption(key, value) {
      Object.assign(this.options, _defineProperty({}, key, value));
    }
  }, {
    key: "unsetOption",
    value: function unsetOption(key) {
      if (hasOwnProperty(this.options, key)) {
        delete this.options[key];
      }
    }
  }]);
  return BaseError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

function isObject(item) {
  return !!item && _typeof(item) === 'object' && !Array.isArray(item);
}
function isFunction(item) {
  return typeof item === 'function';
}
function extendsBaseError(error) {
  if (error instanceof BaseError) {
    return true;
  }
  return !!(isObject(error) && hasOwnProperty(error, 'options') && isObject(error.options) && hasOwnProperty(error, 'getOption') && isFunction(error.getOption) && hasOwnProperty(error, 'getOptions') && isFunction(error.getOptions));
}

export { BaseError, buildMessage, buildOptions, extendsBaseError, hasOwnProperty, mergeOptions };
//# sourceMappingURL=index.esm.js.map
